#!/usr/bin/env python3

from subprocess import Popen, CalledProcessError, PIPE
from urllib.parse import urlparse, ParseResult

def call(cmd, stdout=PIPE, stderr=PIPE, shell=True, nerf=False, throw=True, verbose=False):
    if verbose or nerf:
        logger.info(f'verbose cmd={cmd}')
        pass
    if nerf:
        return (None, 'nerfed', 'nerfed')
    process = Popen(cmd, stdout=stdout, stderr=stderr, shell=shell)  # nosec
    _stdout, _stderr = [
        stream.decode('utf-8') if stream != None else None
        for stream in process.communicate()
    ]
    exitcode = process.poll()
    if verbose:
        if _stdout:
            logger.info(f'verbose stdout={_stdout}')
        if _stderr:
            logger.info(f'verbose stderr={_stderr}')
            pass
    if throw and exitcode:
        raise CalledProcessError(
            exitcode, f'cmd={cmd}; stdout={_stdout}; stderr={_stderr}'
        )
    return exitcode, _stdout, _stderr

def replace(pr, **kwargs):
    return ParseResult(
        scheme=kwargs.get('scheme', pr.scheme),
        netloc=kwargs.get('netloc', pr.netloc),
        path=kwargs.get('path', pr.path),
        params=kwargs.get('params', pr.params),
        query=kwargs.get('query', pr.query),
        fragment=kwargs.get('fragment', pr.fragment),
    )

def toggle(url):
    pr = urlparse(url)
    suffix = 'home'
    if pr.scheme == 'ssh':
        return replace(pr, scheme='https', netloc='github.com').geturl()
    elif pr.scheme == 'https':
        if 'mozilla' in pr.path:
            suffix = 'work'
        return replace(pr, scheme='ssh', netloc=f'git@github.com-{suffix}').geturl()

repo_root = call('git rev-parse --show-toplevel', throw=False)[1].strip()
if repo_root:
    old = call('git config --get remote.origin.url')[1].strip()
    new = toggle(old)
    call(f'git remote set-url origin {new}')
    print(f'{repo_root}: {old} -> {new}')
