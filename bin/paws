#!/usr/bin/env python3

import os
import re
import sys
import json
import requests
sys.dont_write_bytecode = True

from configparser import ConfigParser
from argparse import ArgumentParser, RawDescriptionHelpFormatter

from leatherman.dbg import dbg

class DownloadAccountsJsonError(Exception):
    def __init__(self, result):
        msg = 'Error during download of accounts.json'
        super().__init__(msg)

GITHUB_API = 'https://api.github.com/repos'
GITHUB_API_VERSION = 'application/vnd.github.v3.raw'
REPONAME = 'mozilla-it/itsre-accounts'
FILEPATH = 'accounts.json'
ROLE_SUFFIXES = [
    'admin',
    'readonly',
    'poweruser',
    'viewonly',
]

def load_accounts(filepath):
    GITHUB_TOKEN = open(os.path.expanduser(filepath)).read().strip()
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': GITHUB_API_VERSION,
    }
    url = f'{GITHUB_API}/{REPONAME}/contents/{FILEPATH}'
    result = requests.get(url, headers=headers)
    if result.status_code != 200:
        raise DownloadAccountsJsonError(result)
    cfg = json.loads(result.content)
    return cfg

def main(args=None):
    parser = ArgumentParser(
        description=__doc__,
        formatter_class=RawDescriptionHelpFormatter,
        add_help=False)
    parser.add_argument(
        '-G', '--github-token',
        metavar='FILEPATH',
        default='~/.config/paws/GITHUB_TOKEN',
        help='default="%(default)s"; filepath to github token')
    ns, rem = parser.parse_known_args(args)
    cfg = load_accounts(ns.github_token)
    parser = ArgumentParser(
        parents=[parser])
    parser.add_argument(
        '-r', '--role-suffix',
        default=ROLE_SUFFIXES[0],
        choices=ROLE_SUFFIXES,
        help='default="%(default)s"; select role suffix')
    parser.add_argument(
        'profile',
        choices=cfg.keys(),
        help='choose a profile to look up its role arn')
    ns = parser.parse_args(rem)
    account = cfg[ns.profile]
    arn = f'arn:aws:iam::{account}:role/maws-{ns.role_suffix}'
    print(arn)

if __name__ == '__main__':
    main(sys.argv[1:])

