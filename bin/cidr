#!/usr/bin/env python3

# Copyright (c) 2012-2015 Joshua R. Elsasser.
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

import sys

class cidr:
    def __init__(self, **args):
        addr = args['begin']
        if 'prefix' in args:
            prefix = args['prefix']
        else:
            prefix = 32
        self.fillfromprefix(addr, prefix)

    def fillfromprefix(self, addr, prefix):
        self.prefix = prefix
        self.netmask = self.getnetbits(prefix)
        self.hostmask = self.gethostbits(prefix)
        self.netaddr = addr & self.netmask
        self.bcastaddr = addr | self.hostmask

    def getnetbits(self, mask):
        return 2 ** 32 - 2 ** (32 - mask)

    def gethostbits(self, mask):
        return 2 ** (32 - mask) - 1

    def addrstr(self, addr):
        return '.'.join(str(quad) for quad in
                        [(addr >> shift) & 0xff for shift in (24, 16, 8, 0)])

    def show(self):
        netstr = self.addrstr(self.netaddr)
        maskstr = self.addrstr(self.netmask)
        count = self.bcastaddr - self.netaddr + 1
        print('%s/%d:' % (netstr, self.prefix))
        if count == 1:
            print('  address:              %-16s0x%08x' % (netstr, self.netaddr))
        else:
            print('  network address:      %-16s0x%08x' % (netstr, self.netaddr))
        if count > 1:
            bcaststr = self.addrstr(self.bcastaddr)
            print('  broadcast address:    %-16s0x%08x' % (bcaststr, self.bcastaddr))
        print('  network mask:         %-16s0x%08x' % (maskstr, self.netmask))
        if count == 1:
            print('  1 address total')
        else:
            print('  %d addresses total (%d usable)' % (count, count - 2))
        if count > 2:
            firststr = self.addrstr(self.netaddr + 1)
            laststr = self.addrstr(self.bcastaddr - 1)
            print('  first host address:   %-16s0x%08x' % (firststr, self.netaddr + 1))
            print('  last host address:    %-16s0x%08x' % (laststr, self.bcastaddr - 1))

def parseaddr(addr, expfx=None):
    if addr.lower().startswith('0x'):
        try:
            if len(addr) > 10:
                raise ValueError('moo')
            impfx = (len(addr) - 2) * 4
            swap = list(addr[2:])
            swap.reverse()
            bytes = [int(ii[1], 16) << (ii[0] * 4) for ii in enumerate(swap)]
        except ValueError as e:
            raise ValueError('illegal hexidecimal IP address: %s' % addr) from e
    else:
        try:
            dots = addr.count('.')
            if dots > 3:
                raise ValueError('moo')
            impfx = (1 + dots) * 8
            num = [int(ii) for ii in addr.split('.')]
        except ValueError as e:
            raise ValueError('badly formatted IP address: %s' % addr) from e
        if any(ii < 0 or ii > 255 for ii in num):
            raise ValueError('illegal IP address: %s' % addr)
        bytes = [ii[0] << ii[1] for ii in zip(num, (24, 16, 8, 0))]
    if expfx is None:
        expfx = impfx
    return (sum(bytes), expfx)

def parseprefix(prefix):
    try:
        num = int(prefix)
    except ValueError as e:
        print('invalid prefix length: %s' % prefix)
        return None
    if num < 0 or num > 32:
        print('invalid prefix length: %s' % prefix)
        return None
    return num

def parsearg(arg, mask=None):
    if '/' in arg:
        if mask is not None:
            raise ValueError('both /bits and separate netmask specified')
        pair = arg.split('/', 1)
        addr = parseaddr(pair[0], parseprefix(pair[1]))
    elif mask is not None:
        pfx = parseaddr(mask)[0]
        bits = 32
        while pfx & 1 == 0:
            bits -= 1
            pfx >>= 1
        addr = parseaddr(arg, bits)
    else:
        addr = parseaddr(arg, 32)
    return cidr(begin=addr[0],
                prefix=addr[1])

def main():
    if len(sys.argv) < 2 or len(sys.argv) > 3 or sys.argv[1] in ('-h', '--help'):
        print("usage: cidr address/maskbits")
        print("       cidr address netmask")
        sys.exit(1)
    if len(sys.argv) == 2:
        addr = parsearg(sys.argv[1])
    else:
        addr = parsearg(sys.argv[1], sys.argv[2])
    if addr:
        addr.show()

if __name__ == '__main__':
    main()

